
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDrightNOTAND CHOICE COLON ENTRY EXIT FORWARD_SLASH LBRACE LBRACKET LPAREN NAME NEWLINE NOT OR RBRACE RBRACKET RPAREN STATE STATE_INITIAL_OR_FINAL TRANSITIONtop_level_states : state_list\n                            | emptystate_list : ignorestate_list : statestate_list : states_from_transitionstate_list : state_list ignorestate_list : state_list statestate_list : state_list states_from_transitionstates_from_transition : transition NEWLINEtransition : transition_from_state\n                      | transition_from_initial \n                      | transition_from_choicetransition_from_state : NAME TRANSITION NAME event_with_optional_guard optional_action\n                                 | NAME TRANSITION STATE_INITIAL_OR_FINAL event_with_optional_guard optional_actiontransition_from_initial : STATE_INITIAL_OR_FINAL TRANSITION NAME optional_action_at_initial_transition\n                                   | STATE_INITIAL_OR_FINAL TRANSITION STATE_INITIAL_OR_FINAL optional_action_at_initial_transitionaction_at_initial_transition : COLON NAME optional_action_at_initial_transition : action_at_initial_transition\n                                                  | emptytransition_from_choice : NAME TRANSITION NAME COLON CHOICE LBRACKET guard_exp RBRACKET optional_actionaction : FORWARD_SLASH NAME optional_action : action\n                            | emptyevent_with_optional_guard : event\n                                     | event_with_guardevent : COLON NAMEevent_with_guard : COLON NAME LBRACKET guard_exp RBRACKETentry_with_optional_guard : entry_pseudo_event\n                                     | entry_with_guardentry_pseudo_event : COLON ENTRYentry_with_guard : COLON ENTRY LBRACKET guard_exp RBRACKETexit_with_optional_guard : exit_pseudo_event\n                                    | exit_with_guardexit_pseudo_event : COLON EXITexit_with_guard : COLON EXIT LBRACKET guard_exp RBRACKETguard_exp : simple_guard_exp\n                     | negative_guard_expguard_exp : LPAREN guard_exp RPARENguard_exp : guard_exp AND guard_expguard_exp : guard_exp OR guard_expsimple_guard_exp : NAMEnegative_guard_exp : NOT guard_expstate : STATE NAME NEWLINEstate : STATE NAME CHOICE NEWLINEignore : error NEWLINEstate : STATE NAME LBRACE NEWLINE state_list RBRACE NEWLINE\n                 | STATE NAME LBRACE NEWLINE empty RBRACE NEWLINEstate : STATE NAME event_with_optional_guard action NEWLINEstate : STATE NAME entry_with_optional_guard action NEWLINEstate : STATE NAME exit_with_optional_guard action NEWLINEstate : NAME event_with_optional_guard action NEWLINE\n                 | NAME event action NEWLINEstate : NAME entry_with_optional_guard action NEWLINEstate : NAME exit_with_optional_guard action NEWLINEempty :ignore : NEWLINE'
    
_lr_action_items = {'$end':([0,1,2,3,4,5,6,8,16,17,18,19,32,34,53,58,60,61,62,77,78,79,104,105,],[-55,0,-1,-2,-3,-4,-5,-56,-6,-7,-8,-45,-9,-43,-44,-51,-52,-53,-54,-48,-49,-50,-46,-47,]),'error':([0,2,4,5,6,8,16,17,18,19,32,34,53,54,58,60,61,62,75,77,78,79,104,105,],[7,7,-3,-4,-5,-56,-6,-7,-8,-45,-9,-43,-44,7,-51,-52,-53,-54,7,-48,-49,-50,-46,-47,]),'NEWLINE':([0,2,4,5,6,7,8,11,12,13,14,16,17,18,19,20,27,32,34,35,36,40,41,43,44,45,48,51,52,53,54,55,56,57,58,59,60,61,62,63,65,70,71,72,74,75,77,78,79,80,81,82,84,93,94,95,97,104,105,110,111,],[8,8,-3,-4,-5,19,-56,32,-10,-11,-12,-6,-7,-8,-45,34,-25,-9,-43,53,54,-24,58,60,61,62,-26,-55,-55,-44,8,77,78,79,-51,-21,-52,-53,-54,-55,-55,-16,-18,-19,-15,8,-48,-49,-50,-13,-22,-23,-14,-17,104,105,-27,-46,-47,-55,-20,]),'STATE':([0,2,4,5,6,8,16,17,18,19,32,34,53,54,58,60,61,62,75,77,78,79,104,105,],[9,9,-3,-4,-5,-56,-6,-7,-8,-45,-9,-43,-44,9,-51,-52,-53,-54,9,-48,-49,-50,-46,-47,]),'NAME':([0,2,4,5,6,8,9,16,17,18,19,25,26,32,33,34,42,53,54,58,60,61,62,64,66,67,68,69,73,75,77,78,79,89,90,96,98,99,104,105,],[10,10,-3,-4,-5,-56,20,-6,-7,-8,-45,46,48,-9,52,-43,59,-44,10,-51,-52,-53,-54,48,48,85,85,85,93,10,-48,-49,-50,85,85,85,85,85,-46,-47,]),'STATE_INITIAL_OR_FINAL':([0,2,4,5,6,8,16,17,18,19,25,32,33,34,53,54,58,60,61,62,75,77,78,79,104,105,],[15,15,-3,-4,-5,-56,-6,-7,-8,-45,47,-9,51,-43,-44,15,-51,-52,-53,-54,15,-48,-49,-50,-46,-47,]),'RBRACE':([4,5,6,8,16,17,18,19,32,34,53,54,58,60,61,62,75,76,77,78,79,104,105,],[-3,-4,-5,-56,-6,-7,-8,-45,-9,-43,-44,-55,-51,-52,-53,-54,94,95,-48,-49,-50,-46,-47,]),'TRANSITION':([10,15,],[25,33,]),'COLON':([10,20,46,47,51,52,],[26,26,64,66,73,73,]),'CHOICE':([20,64,],[35,83,]),'LBRACE':([20,],[36,]),'FORWARD_SLASH':([21,22,23,24,27,28,29,30,31,37,38,39,40,48,49,50,63,65,97,102,103,110,],[42,42,42,42,-25,-28,-29,-32,-33,42,42,42,-24,-26,-30,-34,42,42,-27,-31,-35,42,]),'ENTRY':([26,],[49,]),'EXIT':([26,],[50,]),'LBRACKET':([48,49,50,83,],[67,68,69,96,]),'LPAREN':([67,68,69,89,90,96,98,99,],[89,89,89,89,89,89,89,89,]),'NOT':([67,68,69,89,90,96,98,99,],[90,90,90,90,90,90,90,90,]),'RBRACKET':([85,86,87,88,91,92,101,106,107,108,109,],[-41,97,-36,-37,102,103,-42,110,-39,-40,-38,]),'AND':([85,86,87,88,91,92,100,101,106,107,108,109,],[-41,98,-36,-37,98,98,98,-42,98,-39,98,-38,]),'OR':([85,86,87,88,91,92,100,101,106,107,108,109,],[-41,99,-36,-37,99,99,99,-42,99,-39,-40,-38,]),'RPAREN':([85,87,88,100,101,107,108,109,],[-41,-36,-37,109,-42,-39,-40,-38,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'top_level_states':([0,],[1,]),'state_list':([0,54,],[2,75,]),'empty':([0,51,52,54,63,65,110,],[3,72,72,76,82,82,82,]),'ignore':([0,2,54,75,],[4,16,4,16,]),'state':([0,2,54,75,],[5,17,5,17,]),'states_from_transition':([0,2,54,75,],[6,18,6,18,]),'transition':([0,2,54,75,],[11,11,11,11,]),'transition_from_state':([0,2,54,75,],[12,12,12,12,]),'transition_from_initial':([0,2,54,75,],[13,13,13,13,]),'transition_from_choice':([0,2,54,75,],[14,14,14,14,]),'event_with_optional_guard':([10,20,46,47,],[21,37,63,65,]),'event':([10,20,46,47,],[22,40,40,40,]),'entry_with_optional_guard':([10,20,],[23,38,]),'exit_with_optional_guard':([10,20,],[24,39,]),'event_with_guard':([10,20,46,47,],[27,27,27,27,]),'entry_pseudo_event':([10,20,],[28,28,]),'entry_with_guard':([10,20,],[29,29,]),'exit_pseudo_event':([10,20,],[30,30,]),'exit_with_guard':([10,20,],[31,31,]),'action':([21,22,23,24,37,38,39,63,65,110,],[41,43,44,45,55,56,57,81,81,81,]),'optional_action_at_initial_transition':([51,52,],[70,74,]),'action_at_initial_transition':([51,52,],[71,71,]),'optional_action':([63,65,110,],[80,84,111,]),'guard_exp':([67,68,69,89,90,96,98,99,],[86,91,92,100,101,106,107,108,]),'simple_guard_exp':([67,68,69,89,90,96,98,99,],[87,87,87,87,87,87,87,87,]),'negative_guard_exp':([67,68,69,89,90,96,98,99,],[88,88,88,88,88,88,88,88,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> top_level_states","S'",1,None,None,None),
  ('top_level_states -> state_list','top_level_states',1,'p_top_level_states','StateMachineParser.py',29),
  ('top_level_states -> empty','top_level_states',1,'p_top_level_states','StateMachineParser.py',30),
  ('state_list -> ignore','state_list',1,'p_state_list_first_empty','StateMachineParser.py',40),
  ('state_list -> state','state_list',1,'p_state_list_first_state','StateMachineParser.py',44),
  ('state_list -> states_from_transition','state_list',1,'p_state_list_first_states','StateMachineParser.py',49),
  ('state_list -> state_list ignore','state_list',2,'p_state_list_next_empty','StateMachineParser.py',53),
  ('state_list -> state_list state','state_list',2,'p_state_list_next_state','StateMachineParser.py',57),
  ('state_list -> state_list states_from_transition','state_list',2,'p_state_list_next','StateMachineParser.py',62),
  ('states_from_transition -> transition NEWLINE','states_from_transition',2,'p_state_or_transition_transition','StateMachineParser.py',67),
  ('transition -> transition_from_state','transition',1,'p_transition','StateMachineParser.py',75),
  ('transition -> transition_from_initial','transition',1,'p_transition','StateMachineParser.py',76),
  ('transition -> transition_from_choice','transition',1,'p_transition','StateMachineParser.py',77),
  ('transition_from_state -> NAME TRANSITION NAME event_with_optional_guard optional_action','transition_from_state',5,'p_transition_from_state','StateMachineParser.py',81),
  ('transition_from_state -> NAME TRANSITION STATE_INITIAL_OR_FINAL event_with_optional_guard optional_action','transition_from_state',5,'p_transition_from_state','StateMachineParser.py',82),
  ('transition_from_initial -> STATE_INITIAL_OR_FINAL TRANSITION NAME optional_action_at_initial_transition','transition_from_initial',4,'p_transition_from_initial','StateMachineParser.py',98),
  ('transition_from_initial -> STATE_INITIAL_OR_FINAL TRANSITION STATE_INITIAL_OR_FINAL optional_action_at_initial_transition','transition_from_initial',4,'p_transition_from_initial','StateMachineParser.py',99),
  ('action_at_initial_transition -> COLON NAME','action_at_initial_transition',2,'p_action_at_initial_transition','StateMachineParser.py',112),
  ('optional_action_at_initial_transition -> action_at_initial_transition','optional_action_at_initial_transition',1,'p_optional_action_at_initial_transition','StateMachineParser.py',116),
  ('optional_action_at_initial_transition -> empty','optional_action_at_initial_transition',1,'p_optional_action_at_initial_transition','StateMachineParser.py',117),
  ('transition_from_choice -> NAME TRANSITION NAME COLON CHOICE LBRACKET guard_exp RBRACKET optional_action','transition_from_choice',9,'p_transition_from_choice','StateMachineParser.py',121),
  ('action -> FORWARD_SLASH NAME','action',2,'p_action','StateMachineParser.py',131),
  ('optional_action -> action','optional_action',1,'p_optional_action','StateMachineParser.py',135),
  ('optional_action -> empty','optional_action',1,'p_optional_action','StateMachineParser.py',136),
  ('event_with_optional_guard -> event','event_with_optional_guard',1,'p_event_with_optional_guard','StateMachineParser.py',141),
  ('event_with_optional_guard -> event_with_guard','event_with_optional_guard',1,'p_event_with_optional_guard','StateMachineParser.py',142),
  ('event -> COLON NAME','event',2,'p_event','StateMachineParser.py',146),
  ('event_with_guard -> COLON NAME LBRACKET guard_exp RBRACKET','event_with_guard',5,'p_event_with_guard','StateMachineParser.py',150),
  ('entry_with_optional_guard -> entry_pseudo_event','entry_with_optional_guard',1,'p_entry_with_optional_guard','StateMachineParser.py',154),
  ('entry_with_optional_guard -> entry_with_guard','entry_with_optional_guard',1,'p_entry_with_optional_guard','StateMachineParser.py',155),
  ('entry_pseudo_event -> COLON ENTRY','entry_pseudo_event',2,'p_entry_pseudo_event','StateMachineParser.py',159),
  ('entry_with_guard -> COLON ENTRY LBRACKET guard_exp RBRACKET','entry_with_guard',5,'p_entry_with_guard','StateMachineParser.py',163),
  ('exit_with_optional_guard -> exit_pseudo_event','exit_with_optional_guard',1,'p_exit_with_optional_guard','StateMachineParser.py',167),
  ('exit_with_optional_guard -> exit_with_guard','exit_with_optional_guard',1,'p_exit_with_optional_guard','StateMachineParser.py',168),
  ('exit_pseudo_event -> COLON EXIT','exit_pseudo_event',2,'p_exit_pseudo_event','StateMachineParser.py',172),
  ('exit_with_guard -> COLON EXIT LBRACKET guard_exp RBRACKET','exit_with_guard',5,'p_exit_with_guard','StateMachineParser.py',176),
  ('guard_exp -> simple_guard_exp','guard_exp',1,'p_guard_exp','StateMachineParser.py',180),
  ('guard_exp -> negative_guard_exp','guard_exp',1,'p_guard_exp','StateMachineParser.py',181),
  ('guard_exp -> LPAREN guard_exp RPAREN','guard_exp',3,'p_guard_exp_in_parenthes','StateMachineParser.py',185),
  ('guard_exp -> guard_exp AND guard_exp','guard_exp',3,'p_guard_exp_and','StateMachineParser.py',189),
  ('guard_exp -> guard_exp OR guard_exp','guard_exp',3,'p_guard_exp_or','StateMachineParser.py',194),
  ('simple_guard_exp -> NAME','simple_guard_exp',1,'p_simple_guard_exp','StateMachineParser.py',199),
  ('negative_guard_exp -> NOT guard_exp','negative_guard_exp',2,'p_negative_guard_exp','StateMachineParser.py',203),
  ('state -> STATE NAME NEWLINE','state',3,'p_state_simple','StateMachineParser.py',207),
  ('state -> STATE NAME CHOICE NEWLINE','state',4,'p_state_choice','StateMachineParser.py',211),
  ('ignore -> error NEWLINE','ignore',2,'p_ignore_line_with_error','StateMachineParser.py',215),
  ('state -> STATE NAME LBRACE NEWLINE state_list RBRACE NEWLINE','state',7,'p_state_composite','StateMachineParser.py',219),
  ('state -> STATE NAME LBRACE NEWLINE empty RBRACE NEWLINE','state',7,'p_state_composite','StateMachineParser.py',220),
  ('state -> STATE NAME event_with_optional_guard action NEWLINE','state',5,'p_state_with_internal_transition','StateMachineParser.py',236),
  ('state -> STATE NAME entry_with_optional_guard action NEWLINE','state',5,'p_state_with_entry','StateMachineParser.py',243),
  ('state -> STATE NAME exit_with_optional_guard action NEWLINE','state',5,'p_state_with_exit','StateMachineParser.py',249),
  ('state -> NAME event_with_optional_guard action NEWLINE','state',4,'p_state_with_internal_transition_without_keyword_state','StateMachineParser.py',255),
  ('state -> NAME event action NEWLINE','state',4,'p_state_with_internal_transition_without_keyword_state','StateMachineParser.py',256),
  ('state -> NAME entry_with_optional_guard action NEWLINE','state',4,'p_state_with_entry_without_keyword_state','StateMachineParser.py',263),
  ('state -> NAME exit_with_optional_guard action NEWLINE','state',4,'p_state_with_exit_without_keyword_state','StateMachineParser.py',269),
  ('empty -> <empty>','empty',0,'p_empty','StateMachineParser.py',275),
  ('ignore -> NEWLINE','ignore',1,'p_newline','StateMachineParser.py',279),
]
